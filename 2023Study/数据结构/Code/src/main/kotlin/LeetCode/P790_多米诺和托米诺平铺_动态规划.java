package LeetCode;

public class P790_多米诺和托米诺平铺_动态规划 {

    final int MOD = 1000000007;

    // dp[i][4] 状态0，1，2，3
    // 状态0 没有任何覆盖
    // 状态1 上半部分覆盖
    // 状态2 下半部分覆盖
    // 状态3 整个完全覆盖
    public int numTilings(int n) {
        int[][] dp = new int[n + 1][4]; // 状态机
        dp[0][3] = 1; // 覆盖满，只有一种。其他三种状态不会存在
        for (int i = 1; i < n + 1; i++) {
            dp[i][0] = dp[i-1][3]; // 上一个覆盖满
            dp[i][1] = (dp[i-1][0] + dp[i-1][2]) % MOD; // 上一个状态0（完全空的）和状态2（下部分满的），上面空，可以放■■
            dp[i][2] = (dp[i-1][0] + dp[i-1][1]) % MOD; // 上一个状态0（完全空的）和状态1（上部分满的），下面空，可以放■■
            dp[i][3] = (((dp[i-1][0] + dp[i-1][1]) % MOD + dp[i-1][2]) % MOD + dp[i-1][3]) % MOD; // 需要分段取模
        }
        return dp[n][3]; // 完全覆盖满
    }
}
